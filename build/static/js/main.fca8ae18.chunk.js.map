{"version":3,"sources":["components/Transactions.js","components/Navbar.js","components/TransactionHistory.js","components/App.js","serviceWorker.js","index.js"],"names":["Transactions","react_default","a","createElement","className","this","props","balance","account","type","placeholder","id","onClick","onSum","Component","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","react_router","react_router_dom","to","width","height","src","concat","TransactionHistory","History","map","history","key","_date","_from","_to","_ethers","window","jQuery","$","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","setState","loading","state","abi","methods","transfer","date","val","send","from","value","web3","utils","toWei","once","receipt","console","log","count","Date","toLocaleString","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","getBalance","fromWei","net","getId","networkId","networkData","ETHBank","networks","Contract","address","eTHBank","toNumber","i","his","toConsumableArray","_this2","class","components_Navbar","exact","path","component","components_Transactions","components_TransactionHistory","React","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fca8ae18.chunk.js","sourcesContent":["import React,{Component} from \"react\"\r\nimport App from \"./App.js\"\r\nimport Navbar from \"./Navbar.js\"\r\nclass Transactions extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"container mt-5 mb-5\">\r\n\t\t            <h2>Transactions</h2>\r\n\t\t            <form>\r\n\t\t              <b>Current Balance : {this.props.balance} ETH</b>\r\n\t\t              <div className=\"form-group\">\r\n\t\t                <label>From:</label>&nbsp;&nbsp;\r\n\t\t                <small>{this.props.account}</small>\r\n\t\t              </div>\r\n\t\t              <div className=\"form-group\">\r\n\t\t                <label>To:</label>\r\n\t\t                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Account Address\" id=\"input1\"/>\r\n\t\t              </div>\r\n\t\t              <div className=\"form-group\">\r\n\t\t                <label>Ethers:</label>\r\n\t\t                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Ethers\" id=\"input2\"/>\r\n\t\t              </div>\r\n\t\t              <button type=\"button\" className=\"btn btn-outline-success\" onClick={this.props.onSum}>Submit</button>\r\n\t\t              &nbsp;&nbsp;\r\n\t\t            </form>\r\n\t\t          </div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n};\r\nexport default Transactions;","import React,{Component} from \"react\"\r\nimport {Link,Switch} from \"react-router-dom\"\r\nimport App from \"./App.js\"\r\nimport Transactions from \"./Transactions\"\r\nclass Navbar extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\t\t            <a className=\"navbar-brand\" href=\"index.html\">EthPay</a>\r\n\t\t            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t              <span className=\"navbar-toggler-icon\"></span>\r\n\t\t            </button>\r\n\r\n\t\t            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t              <ul className=\"navbar-nav mr-auto\">\r\n\t\t              <Switch>\r\n\t\t                  <Link className=\"nav-link\"\r\n\t\t                   to='/Transactions'\r\n\t\t               \t\t>Transactions</Link>\r\n\t\t              </Switch>\r\n\t\t              <Switch>\r\n\t\t                  <Link className=\"nav-link\" to=\"/History\">History</Link>\r\n\t\t              </Switch>\r\n\t\t              </ul>\r\n\t\t              <div className=\"ml-auto\">\r\n\t\t                <small>{this.props.account}</small>\r\n\t\t                <img\r\n                        \tclassName='mr-2'\r\n                        \twidth='30'\r\n                        \theight='30'\r\n                        \tsrc={`https://joeschmoe.io/api/v1/${this.props.account}`}\r\n                      \t/>\r\n\t\t              </div>\r\n\t\t            </div>\r\n\t\t          </nav>\r\n\t         \t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default Navbar;","import React,{Component} from \"react\"\r\nclass TransactionHistory extends Component{\r\n  render(){\r\n\treturn(\r\n\t\t<div>\r\n        <div className=\"container mt-5\">\r\n                <h1>Transaction History</h1>\r\n                <table className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Date(Time)</th>\r\n                      <th>From</th>\r\n                      <th>To</th>\r\n                      <th>Amount(Wei)</th>\r\n                    </tr>\r\n                  </thead>\r\n                    <tbody>\r\n                      {\r\n                        this.props.History.map((history,key) =>{\r\n                          return(\r\n                            <tr key={key}>\r\n                              <td>{history._date}</td>\r\n                              <td>{history._from}</td>\r\n                              <td>{history._to}</td>\r\n                              <td>{`${history._ethers}`}</td>\r\n                            </tr>\r\n                          );\r\n                        })\r\n                      }\r\n                    </tbody>\r\n                </table>\r\n        </div>\r\n\t\t</div>\r\n\t\t\t);\r\n    }\r\n};\r\nexport default TransactionHistory;","import React from \"react\"\r\nimport \"./App.css\"\r\nimport Web3 from 'web3'\r\nimport 'bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport 'bootstrap/dist/js/bootstrap.js'\r\nimport {BrowserRouter as Router,Route,Switch,Link} from \"react-router-dom\"\r\nimport ETHBank from '../abis/ETHBank.json'\r\nimport Navbar from \"./Navbar\"\r\nimport $ from 'jquery'\r\nimport Popper from 'popper.js'\r\nimport Transactions from \"./Transactions\"\r\nimport History from \"./History\"\r\nimport TransactionHistory from \"./TransactionHistory\"\r\nwindow.jQuery = $;\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      loading : true,\r\n      count: 0,\r\n      account: '',\r\n      receipt: null,\r\n      abi : null,\r\n      History: [],\r\n      date: new Date().toLocaleString(),\r\n      balance: ''\r\n    };\r\n  }\r\n  async componentWillMount(){\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3(){\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData(){\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    let balance = await web3.eth.getBalance(accounts[0])\r\n    balance =  await web3.utils.fromWei(balance,'ether')\r\n    this.setState({ account: accounts[0] })\r\n    this.setState({balance : balance})\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = ETHBank.networks[networkId]\r\n    if(networkData) {\r\n      const eTHBank = await web3.eth.Contract(ETHBank.abi, networkData.address)\r\n      this.setState({abi : eTHBank})\r\n      let count =  await eTHBank.methods.count().call()\r\n      count = count.toNumber()\r\n      for (var i = 1; i <= count; i++) {\r\n        const his = await eTHBank.methods.history(this.state.account,i).call()\r\n        if(his._ethers != 0){\r\n          this.setState({\r\n            History: [...this.state.History, his]\r\n          })\r\n        }\r\n      }\r\n      this.setState({count : count})\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('ETHBank contract not deployed to detected network.')\r\n    }\r\n  }\r\n  onSum = (event) =>{\r\n    event.preventDefault()\r\n    let R = \"let\"\r\n    this.setState({loading : true})\r\n    this.state.abi.methods.transfer(this.state.date,$(\"#input1\").val()).send({from : this.state.account ,  value: window.web3.utils.toWei($(\"#input2\").val(), 'ether')}).once('receipt',(receipt) =>{\r\n      this.setState({loading : false})\r\n      console.log(\"Underrated\")\r\n    })\r\n    this.setState({loading : false})\r\n  }\r\n  render(){\r\n      return (\r\n            this.state.loading ?\r\n                                <div className=\"text-center\" id=\"spinner\">\r\n                                  <div class=\"spinner-grow text-muted\"></div>\r\n                                  <div class=\"spinner-grow text-primary\"></div>\r\n                                  <div class=\"spinner-grow text-success\"></div>\r\n                                  <div class=\"spinner-grow text-info\"></div>\r\n                                  <div class=\"spinner-grow text-warning\"></div>\r\n                                  <div class=\"spinner-grow text-danger\"></div>\r\n                                  <div class=\"spinner-grow text-secondary\"></div>\r\n                                  <div class=\"spinner-grow text-dark\"></div>\r\n                                  <div class=\"spinner-grow text-light\"></div>\r\n                                  <p>Loading.....</p>\r\n                                </div>\r\n                                  :<div>\r\n                                      <Navbar account={this.state.account}/>\r\n                                      <Switch>\r\n                                        <Route exact path=\"/Transactions\" component={() =><Transactions account={this.state.account} onSum={this.onSum} balance={this.state.balance}/>}/>\r\n                                        <Route path=\"/History\" component={ () =><TransactionHistory History={this.state.History}/>}/>\r\n                                        <Route component={Transactions}/>\r\n                                      </Switch>\r\n                                    </div>\r\n          \r\n        );\r\n  }\r\n};\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<App/>\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}